<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAACEAAAAygAAAM0AAADNAAAAzQAAAMsAAACQAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAdgAAAMwAAADNAAAAzQAA
        AM0AAADKAAAAhAAAAMgAAADsAAAAtwAAALUAAAC4AAAA6QAAAP0AAAC2AAAAVgAAAEsAAABMAAAATAAA
        AEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAFEAAADLAAAA6wAA
        ALgAAAC1AAAAtwAAAOwAAADIAAAAzAAAALkAAAAMAAAABQAAABAAAAC0AAAA/wAAAP8AAAD6AAAA+AAA
        APQAAAD0AAAA9AAAAPQAAAD1AAAA+QAAAPkAAAD1AAAA9AAAAPQAAAD0AAAA9AAAAPgAAAD5AAAA+QAA
        AP8AAAC0AAAAEAAAAAUAAAAMAAAAuQAAAMwAAADMAAAAuAAAAAYAAAAAAAAACgAAALIAAAD/AAAA/wAA
        AP0AAACWAAAASgAAAEsAAABLAAAASgAAAFwAAADdAAAA3QAAAFwAAABKAAAASwAAAEsAAABKAAAAlgAA
        AP0AAAD/AAAA/wAAALIAAAAKAAAAAAAAAAYAAAC4AAAAzAAAAMwAAAC4AAAABgAAAAAAAAAKAAAAsgAA
        AP8AAAD/AAAA+AAAAEsAAAAAAAAAAAAAAAAAAAAAAAAACQAAALcAAAC3AAAACQAAAAAAAAAAAAAAAAAA
        AAAAAABLAAAA+AAAAP8AAAD/AAAAsgAAAAoAAAAAAAAABgAAALgAAADMAAAAzAAAALgAAAAGAAAAAAAA
        AAoAAACyAAAA/wAAAP8AAAD3AAAASwAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAtgAAALYAAAAJAAAAAAAA
        AAAAAAAAAAAAAAAAAEsAAAD3AAAA/wAAAP8AAACyAAAACgAAAAAAAAAGAAAAuAAAAMwAAADMAAAAuAAA
        AAYAAAAAAAAACgAAALIAAAD/AAAA/wAAAPcAAABLAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAC2AAAAtgAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAASwAAAPcAAAD/AAAA/wAAALIAAAAKAAAAAAAAAAYAAAC4AAAAzAAA
        AMwAAAC4AAAABgAAAAAAAAAKAAAAsgAAAP8AAAD/AAAA9wAAAEoAAAAAAAAAJAAAAEAAAAAHAAAACQAA
        ALYAAAC2AAAACQAAAAcAAABAAAAAJAAAAAAAAABKAAAA9wAAAP8AAAD/AAAAsgAAAAoAAAAAAAAABgAA
        ALgAAADMAAAAzAAAALgAAAAGAAAAAAAAAAoAAACyAAAA/wAAAP8AAAD5AAAAWwAAAAEAAACEAAAA2gAA
        ACcAAAATAAAAwgAAAMIAAAATAAAAJwAAANoAAACEAAAAAQAAAFwAAAD6AAAA/wAAAP8AAACyAAAACgAA
        AAAAAAAGAAAAuAAAAMwAAADMAAAAuAAAAAYAAAAAAAAACgAAALIAAAD/AAAA/wAAAP8AAADaAAAAsgAA
        AN0AAAD3AAAAvgAAAL4AAAD1AAAA9QAAAL4AAAC+AAAA9wAAAN0AAACyAAAA2gAAAP8AAAD/AAAA/wAA
        ALIAAAAKAAAAAAAAAAYAAAC4AAAAzAAAAMwAAAC4AAAABgAAAAAAAAAKAAAAsgAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAsgAAAAoAAAAAAAAABgAAALgAAADMAAAAzAAAALgAAAAGAAAAAAAAAAoAAACyAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAACyAAAACgAAAAAAAAAGAAAAuAAAAMwAAADMAAAAuAAAAAYAAAAAAAAACgAA
        ALIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALIAAAAKAAAAAAAAAAYAAAC4AAAAzAAAAMwAAAC4AAAABgAA
        AAAAAAAKAAAAsgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAsgAAAAoAAAAAAAAABgAAALgAAADMAAAAzAAA
        ALgAAAAGAAAAAAAAAAoAAACyAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACyAAAACgAAAAAAAAAGAAAAuAAA
        AMwAAADMAAAAuAAAAAYAAAAAAAAACgAAALIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAALIAAAAKAAAAAAAA
        AAYAAAC4AAAAzAAAAMwAAAC4AAAABgAAAAAAAAAFAAAAigAAAOAAAADeAAAA3gAAAN4AAADeAAAA3gAA
        AN4AAADeAAAA3gAAAN4AAADeAAAA3gAAAN4AAADeAAAA3gAAAN4AAADeAAAA3gAAAN4AAADgAAAAigAA
        AAUAAAAAAAAABgAAALgAAADMAAAAzAAAALgAAAAGAAAAAAAAAAAAAAANAAAAIAAAACEAAAAhAAAAIQAA
        ACEAAAAhAAAAIQAAACEAAAAhAAAAIQAAACEAAAAhAAAAIQAAACEAAAAhAAAAIQAAACEAAAAhAAAAIQAA
        ACAAAAANAAAAAAAAAAAAAAAGAAAAuAAAAMwAAADMAAAAuAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAC4AAAAzAAAAM0AAAC6AAAACAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAACQAAAAkAAAAJAAAACQAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAALoAAADNAAAAuAAAAOsAAABpAAAADAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAKgAAAC7AAAAugAAALoAAAC8AAAAjAAA
        AA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAABpAAAA6wAAALgAAAA2AAAAsQAA
        APMAAACiAAAAKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAApgAAALkAAAC4AAAAuAAA
        ALoAAACLAAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnAAAAogAAAPQAAACyAAAANQAA
        AAAAAAARAAAAeAAAAOgAAADVAAAAVwAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACwAA
        AAsAAAALAAAACwAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAVAAAANMAAADqAAAAfAAA
        ABMAAAAAAAAAAAAAAAAAAAADAAAAQgAAAMMAAADxAAAAkgAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAAAI0AAADwAAAAxgAA
        AEUAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAAIwAAADwAAAAxwAAAEcAAAAEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAEMAAADEAAAA8AAA
        AJAAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAFMAAADSAAAA6wAA
        AH4AAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAB6AAAA6QAA
        ANQAAABXAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACUAAACgAAAA8wAAALYAAAA3AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA0AAAAtAAA
        APMAAACjAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAsAAABlAAAA3wAAAOEAAABrAAAADQAAAAAAAAAAAAAAAAAAAAAAAAALAAAAZwAA
        AN8AAADhAAAAaAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAyAAAAsgAAAPQAAAClAAAAKQAAAAAAAAAAAAAAJgAA
        AKEAAADzAAAAtQAAADUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAeAAAAOkAAADVAAAAWgAA
        AFgAAADTAAAA6gAAAHwAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAQgAA
        AMAAAADyAAAA8gAAAMQAAABEAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHwAAAJUAAACWAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAP//AAAAAAAAAAAAEAAACBA8PAgQPDwIEDw8CBAgBAgQAAAIEAAACBAA
        AAgQAAAIEAAACBAAAAgQAAAIEAAACBAAAAgYAAAYH///+B/4H/gP8A/wB/AP4IH4H4HA//8D8D/8D/gf
        +B/+B+B//wPA//+Bgf//4Af///AP///8P/8=
</value>
  </data>
</root>